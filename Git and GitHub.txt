Why version control System is important in developement
: 1) Collabration between team which are working on the same project from different regions
  2) Storing versions - project is not completed in one version it takes n number of versions
  3) Backup of versions

what is version control
:A version control system records all changes made to a file or set files, so a specific version may be called later if needed
- A system makes sure that all the teams members are working on the latest version of the file.


#different types VCS

difference between CVCS and DVCS

1-On CVCS we directly work on the file of remote repository and we can directly commit and update the branch on the remote repository.
2-on DVCS it created local repository on the system and has backup and history locally. We need to push and pull local repository and from working file need to commit and update the local repo.
3-DVCS is faster than CVCS
4- 

Centralized Version Control Systems (CVCS):

1. Subversion (SVN): Subversion is one of the most well-known centralized version control systems. It uses a central repository to store files and their complete version history. Users check out files from this central repository to make changes and then commit those changes back to the repository.

2. Perforce: Perforce is another widely used centralized version control system, particularly in enterprise environments. It offers robust versioning capabilities and is optimized for handling large binary files.

3. IBM Rational ClearCase: ClearCase is a centralized version control system that provides features for configuration management, version control, and parallel development.

Distributed Version Control Systems (DVCS):

1. Git: Git is the most popular distributed version control system. Each user has a complete copy of the repository, including its full history, on their local machine. This allows for faster operations, offline work, and more flexible branching and merging.

2. Mercurial: Mercurial is another distributed version control system that shares many similarities with Git. It offers an intuitive command-line interface and is known for its scalability and performance.

3. Bazaar: Bazaar is a distributed version control system developed by Canonical, known for its ease of use and flexibility. It supports multiple workflows and is suitable for projects of varying sizes.

4. Darcs: Darcs is a unique distributed version control system that focuses on a patch-based approach to recording changes. It allows users to pull changes directly from other repositories, making it decentralized in nature.


**Installation of git is already done**

**configure name and email by commands

'git config --global user.name "your_email@example.com"
'git config --global user.email "your_email@example.com"

**SSH key set has been done by using coomands on git bash

'ssh-keygen -t ed25519 -C "email@id.com"
copy the public ssh key 
after that open github setting and ssh and create new ssh and paste the key id
for clonning the any repository now copy the ssh URL from remote repository
'git clone URL - all files of project get downloaded and connected
 
**connect the project with git using commands 
'git init
'git add.
'git commit -m "nameany"

after that create new repo on github and copy the url to connect to the local repo 
'git remote add origin URL
'git push --set-upstream origin master

the project get push on the remote repo on master branch
after modifing something on local project then command to push new as
'git status  - for knowing which file are changes
'git add . - for adding new file to push 
'git status - for cheking files get add or not
'git commit -m "comments"

for connect local project from remote directory 
'git init
'git add .
'git status 
copy url from remote repository 
'git commit -m "comment"
'git remote add origin URL
'git pull origin master

**to check in which brach we are working

'git branch 
to rename branch
'git branch -M NEWNAME
to enter into new brach from current branch
'git checkout BRANCHNAME
to create new branch
'git checkout -b NEWBRANCHNAME
to delete git branch 
'git branch -d branchname

## If we created branches and write diff code them they are reflected on remote repo after push request
'git diff name_of_2nd_branch

## mearge the braches 
There are two ways to merge the braches
1. If we working on the project so we need to give PR (pull request) to the senior developer and after reviewing out brach it going to merge.
2.Direct campare and pull directly from remote repository.
-some times if both braches have diff code on the same line so it conflict the error to resolve it we can manually select the changes

command to merge branches
'git merge second_branch

## for undo the changes
1.for undo the changes when we are only add the changes 
'git reset  -for all changes
'git reset filename  -for selected files

'git log   -to check all commits

2.undo the changes when we are commit the change and only want to undo last commit (HEAD)
'git reset HEAD~1

3.undo selected commit run git log command to check hash code of selected commit and copy
'git reset HashCodeofCommit

17-04-2024

#Branching in deapth##

Do multiple changes and 'git add . and 'git commit -m "comment" multiple times
*to check all history of commits
- 'git log  or   'git log --all --graph  pree 'q' to exit
'git branch NEWBRANCHNAME    - to create new branch
'git checkout BRANCHNAME  - to change from one branch to another

So created multiple branches with multiple changes so we need to merge some where the branches

# Merging the braches

direct merge two braches with command 
'git merge <brachname> -m "comment"
If there was conflict in the branches code then we have to select manually the code from the files which is going to be merge eith the branch and them run same command
'git merge <brachname> -m "comment"


!##!Feature branch WorkFlow!##!

--Steps of feature brach workflow

1.Create a feature branch
-create a new branch on git 
2.Upload feature branch to github
-Upload to github feature branch
-when we upload we need to provide local branch name like origin
- command - 'git remote add origin URL
3.Create a "Pull Request" (Do code reviews)
-For pull request git hub directly provide button or do mannually goes into pull request section from your GitHub accound and create a new pull request 
-where we raised the pull request and people see the changes and approved or comment aon that.
4.Merge the feature branch into master/main branch
-after approved the PR then we directly merge the Brach to the master brach just by clicking on the merge button

!##! Update local repository from remote remote repositories
'get fetch   - to fetch the changes
and pull the all changes from remote to local
'get pull origin(remote repository branch) master(local repo branch name)

**Merge the conflict in Feature branch workflow**

-when the two developers working on different braches of the same project file and change the code and one of them merge sun brach to main brach and then when second developer trying to merge his brach to main brach then conflict was created on the github web,because both are working on the same file and chaging same lines of the code .We can solved it by changing on the web editor same like vs code

## Resolving merge conflicts on computer ## 

-resolve conflict on computer
-firtly pull on local machine
-go into branch that we want to merge
-'git merge master 
-then do manually from machin vs code
-then add and commit the branch
-then push 'git push origin feature4

# To remove the files from the local repository 
- 'rm -fr .git